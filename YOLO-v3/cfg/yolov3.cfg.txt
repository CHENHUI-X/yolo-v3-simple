[net]
# Testing
# batch=1
# subdivisions=1
# Training
batch=64
subdivisions=16
width=416
height=416
channels=3
momentum=0.9
decay=0.0005
angle=0
saturation = 1.5
exposure = 1.5
hue=.1
learning_rate=0.001
burn_in=1000
max_batches = 500200
policy=steps
steps=400000,450000
scales=.1,.1

# --------------------------------    
# index  = 1 
# input : 416*416*3
[convolutional]
batch_normalize=1
filters=32
size=3
stride=1
pad=1
activation=leaky
# output : 416*416*32

# --------------------------------  
# Downsample
# index  = 2 
# input : 416*416*32
[convolutional]
batch_normalize=1
filters=64
size=3
stride=2
pad=1
activation=leaky
# output : 208*208*64

# index  = 3
# input :  208*208*64
[convolutional]
batch_normalize=1
filters=32
size=1
stride=1
pad=1
activation=leaky
# output :  208*208*32


# index  = 4
# input :  208*208*32
[convolutional]
batch_normalize=1
filters=64
size=3
stride=1
pad=1
activation=leaky
# output : 208*208*64


# index  = 5
# input : 208*208*64

[shortcut]
from=-3
activation=linear
# out = previous 1 layer  + previous 3 layer 
# output : 208*208*64

# --------------------------------
# Downsample
# index  = 6
# input : 208*208*64
[convolutional]
batch_normalize=1
filters=128
size=3
stride=2
pad=1
activation=leaky
# output : 104*104*128
# --------------------------------
# index  = 7
# input : 104*104*128
[convolutional]
batch_normalize=1
filters=64
size=1
stride=1
pad=1
activation=leaky
# output : 104*104*64


# index  = 8
# input: 104*104*64
[convolutional]
batch_normalize=1
filters=128
size=3
stride=1
pad=1
activation=leaky
# output : 104*104*128

# index  = 9
# input : 104*104*128
[shortcut]
from=-3
activation=linear
# output : 104*104*128
# --------------------------------


# index  = 10
# input : 104*104*128
[convolutional]
batch_normalize=1
filters=64
size=1
stride=1
pad=1
activation=leaky
# output : 104*104*64


# index  = 11
# input : 104*104*64
[convolutional]
batch_normalize=1
filters=128
size=3
stride=1
pad=1
activation=leaky
# output : 104*104*128


# index  = 12
# input : 104*104*128
[shortcut]
from=-3
activation=linear
# output : 104*104*128

# --------------------------------
# Downsample
# index  = 13
# input : 104*104*128
[convolutional]
batch_normalize=1
filters=256
size=3
stride=2
pad=1
activation=leaky
# output : 52*52*256
# --------------------------------

# index  = 14
# input : 52*52*256
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
# output : 52*52*128

# index  = 15
# input : 52*52*128
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky
# output : 52*52*256

# index  = 16
# input : 52*52*256
[shortcut]
from=-3
activation=linear
# output : 52*52*256
# --------------------------------

# index  = 17
# input : 52*52*256
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
# output : 52*52*128

# index  = 18
# input: 52*52*128
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky
# output : 52*52*256

# index  = 19
# input : 52*52*256
[shortcut]
from=-3
activation=linear
# output : 52*52*256
# --------------------------------

# index  = 20
# input : 52*52*256
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
# output : 52*52*128


# index  = 21
# input : 52*52*128
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky
# output : 52*52*256

# index  = 22
# input : 52*52*256
[shortcut]
from=-3
activation=linear
# output : 52*52*256
# --------------------------------


# index  = 23
# input : 52*52*256
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
# output : 52*52*128

# index  = 24
# input : 52*52*128
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky
# output : 52*52*256

# index  = 25
# input : 52*52*256
[shortcut]
from=-3
activation=linear
# output : 52*52*256
# --------------------------------

# index  = 26
# input : 52*52*256
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
# output : 52*52*128

# index  = 27
# input : 52*52*128
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky
# output : 52*52*256

# index  = 28
# input : 52*52*256
[shortcut]
from=-3
activation=linear
# output : 52*52*256
# --------------------------------

# index  = 29
# input : 52*52*256
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
# output : 52*52*128

# index  = 30
# input : 52*52*128
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky
# output : 52*52*256

# index  = 31
# input : 52*52*256
[shortcut]
from=-3
activation=linear
# output : 52*52*256
# --------------------------------

# index  = 32
# input : 52*52*256
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
# output : 52*52*128

# index  = 33
# input : 52*52*128
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky
# output : 52*52*256

# index  = 34
# input : 52*52*256
[shortcut]
from=-3
activation=linear
# output : 52*52*256
# --------------------------------

# index  = 35
# input : 52*52*256
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
# output : 52*52*128

# index  = 36
# input : 52*52*128
[convolutional]
batch_normalize=1
filters=256
size=3
stride=1
pad=1
activation=leaky
# output : 52*52*256

# index  = 37
# input : 52*52*256
[shortcut]
from=-3
activation=linear
# output : 52*52*256

# --------------------------------
# index  = 38
# input : 52*52*256
# Downsample
[convolutional]
batch_normalize=1
filters=512
size=3
stride=2
pad=1
activation=leaky
# output : 26*26*512

# --------------------------------
# index  = 39
# input : 26*26*512
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky
# output : 26*26*256

# index  = 40
# input : 26*26*256
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky
# output : 26*26*512

# index  = 41
# input : 26*26*512
[shortcut]
from=-3
activation=linear
# output : 26*26*512
# --------------------------------

# index  = 42
# input : 26*26*512
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky
# output : 26*26*256

# index  = 43
# input : 26*26*256
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky
# output : 26*26*512

# index  = 44
# input : 26*26*512
[shortcut]
from=-3
activation=linear
# output : 26*26*512
# --------------------------------

# index  = 45
# input : 26*26*512
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky
# output : 26*26*256

# index  = 46
# input : 26*26*256
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky
# output : 26*26*512

# index  = 47
# input : 26*26*512
[shortcut]
from=-3
activation=linear
# output : 26*26*512
# --------------------------------

# index  = 48
# input : 26*26*512
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky
# output : 26*26*256

# index  = 49
# input : 26*26*256
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky
# output : 26*26*512

# index  = 50
# input : 26*26*512
[shortcut]
from=-3
activation=linear
# output : 26*26*512
# --------------------------------

# index  = 51
# input : 26*26*512
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky
# output : 26*26*256

# index  = 52
# input : 26*26*256
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky
# output : 26*26*512

# index  = 53
# input : 26*26*512
[shortcut]
from=-3
activation=linear
# output : 26*26*512
# --------------------------------

# index  = 54
# input : 26*26*512
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky
# output : 26*26*256

# index  = 55
# input : 26*26*256
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky
# output : 26*26*512

# index  = 56
# input : 26*26*512
[shortcut]
from=-3
activation=linear
# output : 26*26*512
# --------------------------------

# index  = 57
# input : 26*26*512
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky
# output : 26*26*256

# index  = 58
# input : 26*26*256
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky
# output : 26*26*512

# index  = 59
# input : 26*26*512
[shortcut]
from=-3
activation=linear
# output : 26*26*512
# --------------------------------

# index  = 60
# input : 26*26*512
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky
# output : 26*26*256

# index  = 61
# input : 26*26*256
[convolutional]
batch_normalize=1
filters=512
size=3
stride=1
pad=1
activation=leaky
# output : 26*26*512

# index  = 62
# input : 26*26*512
[shortcut]
from=-3
activation=linear
# output : 26*26*512

# --------------------------------
# index  = 63
# Downsample
# input  : 26*26*512 

[convolutional]
batch_normalize=1
filters=1024
size=3
stride=2
pad=1
activation=leaky
# output : 13*13*1024

# --------------------------------
# index  = 64
# input  : 13*13*1024
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky
# output : 13*13*512

# --------------------------------
# index  = 65
# input  : 13*13*512
[convolutional]
batch_normalize=1
filters=1024
size=3
stride=1
pad=1
activation=leaky
# output : 13*13*1024

# index  = 66
# input : 13*13*1024
[shortcut]
from=-3
activation=linear
# output : 13*13*1024
# --------------------------------

# index  = 67
# input  : 13*13*1024
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky
# output : 13*13*512

# index  = 68
# input  : 13*13*512
[convolutional]
batch_normalize=1
filters=1024
size=3
stride=1
pad=1
activation=leaky
# output : 13*13*1024

# index  = 69
# input : 13*13*1024
[shortcut]
from=-3
activation=linear
# output : 13*13*1024
# --------------------------------

# index  = 70
# input  : 13*13*1024
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky
# output : 13*13*512

# index  = 71
# input  : 13*13*512
[convolutional]
batch_normalize=1
filters=1024
size=3
stride=1
pad=1
activation=leaky
# output : 13*13*1024


# index  = 72
# input : 13*13*1024
[shortcut]
from=-3
activation=linear
# output : 13*13*1024
# --------------------------------

# index  = 73
# input  : 13*13*1024
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky
# output : 13*13*512

# index  = 74
# input  : 13*13*512
[convolutional]
batch_normalize=1
filters=1024
size=3
stride=1
pad=1
activation=leaky
# output : 13*13*1024


# index  = 75	
# input : 13*13*1024
[shortcut]
from=-3
activation=linear

# output : 13*13*1024
# --------------------------------

#########笔记图中对应的第一个convolutional set#############
# index  = 76
# input : 13*13*1024
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky
# output : 13*13*512

# index  = 77
# input : 13*13*512
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=1024
activation=leaky
# output : 13*13*1024

# index  = 78
# input : 13*13*1024
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky
# output : 13*13*512

# index  = 79
# input : 13*13*512
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=1024
activation=leaky
# output : 13*13*1024

# index  = 80
# input : 13*13*1024
[convolutional]
batch_normalize=1
filters=512
size=1
stride=1
pad=1
activation=leaky
# output : 13*13*512

# 分支一的第1层
# index  = 81
# input : 13*13*512
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=1024
activation=leaky
# output : 13*13*1024

# 分支一的第2层
# index  = 82
# input : 13*13*1024
[convolutional]
size=1
stride=1
pad=1
filters=255
activation=linear
# output : 13*13*255
# whrer 255 =  3个框*（x,y,w,h,conf + 80个类别)

# --------------------------------
# 这里是上边这层的参数设置层
# index = 83
[yolo]
mask = 6,7,8
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326
classes=80
num=9
jitter=.3
ignore_thresh = .7
truth_thresh = 1
random=1
# 即predict one : 输出
# --------------------------------

# 开始第二个分支
# index = 84
# input = 第80层的结果 ：13*13*512
[route]
layers = -4
# output = 第80层的结果 ：13*13*512
# --------------------------------

# # index = 85
# input =  13*13*512
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky
# output = 13* 13*256
# --------------------------------

# index  = 86
# input = 13* 13*256
[upsample]
stride=2
# output = 26 * 26 * 256
# --------------------------------

# concatenated the layers along the depth (channel） dimension.
# index = 87
# input = 86层：26 * 26 * 256 && 61 层 26 * 26 *512  
[route]
layers = -1, 61
# output = 26 * 26 * 768
# --------------------------------

# index = 88 
# input = 26*26*768
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky
# output = 26 *26 *256
# --------------------------------

# index = 89 
# input = 26 * 26 *256
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=512
activation=leaky
# output = 26 *26 * 512
# --------------------------------

# index = 90 
# input = 26 * 26 * 512
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky
# output = 26 *26 * 256
# --------------------------------

# index = 91 
# input = 26 * 26 * 256
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=512
activation=leaky
# output = 26 *26 * 512
# --------------------------------
# index = 91
# input = 26 *26 * 512
[convolutional]
batch_normalize=1
filters=256
size=1
stride=1
pad=1
activation=leaky
#   output = 26 *26 * 256
# --------------------------------

# 第二个分支的第1层
# index = 92
# input = 26 *26 * 256
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=512
activation=leaky
# output = 26 *26 * 512
# --------------------------------

# 第二个分支的第2层，也就是输出层
# index = 93
# input = 26 *26 * 512
[convolutional]
size=1
stride=1
pad=1
filters=255
activation=linear
# output = 26 *26 * 255
# whrer 255 =  3个框*（x,y,w,h,conf + 80个类别)

# --------------------------------

# index = 94
[yolo]
mask = 3,4,5
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326
classes=80
num=9
jitter=.3
ignore_thresh = .7
truth_thresh = 1
random=1
# --------------------------------

# index = 95
# input= 91层：26 *26 * 256
[route]
layers = -4
# output = 26 * 26 *256
# --------------------------------

# index  = 96
# input  = 26 * 26 * 256
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
# output  = 26 *26 *128
# --------------------------------

# index = 97
# input = 26 *26 *128
[upsample]
stride=2
# input = 52 * 52 *128 

# --------------------------------

# index = 98
# input = 97层：52 *52 *128 && 36 层： 52*52*256
[route]
layers = -1, 36
# output = 52 *52 * 374
# --------------------------------

# index =  99
# input = 52 * 52 *374 
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
# output = 52 * 52 *128
# --------------------------------

# index =  100
# input = 52 * 52 * 128
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=256
activation=leaky
# output = 52 * 52 * 256
# --------------------------------

# index =  101
# input = 52 * 52 * 256
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
# output = 52 * 52 * 128
# --------------------------------

# index =  102
# input = 52 *52 *128
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=256
activation=leaky
# output = 52 * 52 * 256
# --------------------------------

# index =  103
# input = 52 *52 *256
[convolutional]
batch_normalize=1
filters=128
size=1
stride=1
pad=1
activation=leaky
# output = 52 *52 * 128
# --------------------------------

# index =  104
# input = 52 * 52 *128
[convolutional]
batch_normalize=1
size=3
stride=1
pad=1
filters=256
activation=leaky
# output = 52 *52 *256
# --------------------------------

# index =  105
# input =  52 *52 *256
[convolutional]
size=1
stride=1
pad=1
filters=255
activation=linear
# output = 52 * 52 * 255
# --------------------------------
[yolo]
mask = 0,1,2
anchors = 10,13,  16,30,  33,23,  30,61,  62,45,  59,119,  116,90,  156,198,  373,326
classes=80
num=9
jitter=.3
ignore_thresh = .7
truth_thresh = 1
random=1
# ------------------------------  